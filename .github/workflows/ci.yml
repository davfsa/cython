name: CI

on: [push, pull_request]

jobs:
  ci:
    strategy:
      # Allows for matrix sub-jobs to fail without canceling the rest
      fail-fast: false

      # MATRIX:
      # =======
      # Required parameters:
      #  os                  the os to run on
      #  python-version      the python version to use
      #  backend             the backend to use
      #  env                 any additional env variables. Set to '{}' for none
      # Optional parameters:
      #  extra_hash          extra hash str to differentiate from other caches with similar name (must always start with '-')
      matrix:
        # Tests [amd64]
        #
        # FIXME: 'cpp' tests seems to fail due to compilation errors (numpy_pythran_unit)
        # in all python versions and test failures (builtin_float) in 3.5<
        os: [ubuntu-18.04]
        backend: [c, cpp]
        python-version: [2.7, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9]
        env: [{}]

        include:
          # Ubuntu sub-jobs:
          # ================
          # Linting
          - os: ubuntu-18.04
            python-version: 3.7
            backend: "c,cpp"
            env: { TEST_CODE_STYLE: 1 }
            extra_hash: "-codestyle"
          # Limited API
          - os: ubuntu-18.04
            python-version: 3.6
            backend: "c,cpp"
            env: { LIMITED_API: "--limited-api", EXCLUDE: "--no-file" }
            extra_hash: "-limited_api"
          - os: ubuntu-18.04
            python-version: 3.7
            backend: "c,cpp"
            env: { LIMITED_API: "--limited-api", EXCLUDE: "--no-file" }
            extra_hash: "-limited_api"
          - os: ubuntu-18.04
            python-version: 3.8
            backend: "c,cpp"
            env: { LIMITED_API: "--limited-api", EXCLUDE: "--no-file" }
            extra_hash: "-limited_api"
          # Stackless
          - os: ubuntu-18.04
            python-version: 2.7
            backend: c
            env: { STACKLESS: true, PY: 2 }
            extra_hash: "-stackless"
          - os: ubuntu-18.04
            python-version: 3.6
            backend: c
            env: { STACKLESS: true, PY: 3 }
            extra_hash: "-stackless"
          # Pypy
          - os: ubuntu-18.04
            python-version: pypy-2.7
            backend: c
            env: {}
          - os: ubuntu-18.04
            python-version: pypy-3.6
            backend: c
            env: {}
          # Pypy [allowed-failures] - These specifically test known bugs
          - os: ubuntu-18.04
            python-version: pypy-2.7
            backend: c
            env:
              {
                EXCLUDE: "--listfile=tests/pypy_bugs.txt --listfile=tests/pypy2_bugs.txt bugs",
              }
            extra_hash: "-allowed_failures"
          - os: ubuntu-18.04
            python-version: pypy-3.6
            backend: c
            env: { EXCLUDE: "--listfile=tests/pypy_bugs.txt bugs" }
            extra_hash: "-allowed_failures"
          # Coverage - Disabled due to taking too long to run
          # - os: ubuntu-18.04
          #   python-version: 3.7
          #   backend: "c,cpp"
          #   env: { COVERAGE: 1 }
          #   extra_hash: '-coverage'

          # MacOS sub-jobs
          # ==============
          - os: macos-10.15
            python-version: 2.7
            backend: "c,cpp"
            env: { MACOSX_DEPLOYMENT_TARGET: 10.14 }
          - os: macos-10.15
            python-version: 3.8
            backend: "c,cpp"
            env: { MACOSX_DEPLOYMENT_TARGET: 10.14 }

    runs-on: ${{ matrix.os }}

    env:
      BACKEND: ${{ matrix.backend }}
      OS_NAME: ${{ matrix.os }}
      PYTHON_VERSION: ${{ matrix.python-version }}
      USE_CCACHE: 1
      CCACHE_SLOPPINESS: "pch_defines,time_macros"
      CCACHE_COMPRESS: 1
      CCACHE_MAXSIZE: "250M"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache [ccache]
        uses: pat-s/always-upload-cache@v2.1.3
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache${{ matrix.extra_hash }}-${{ matrix.python-version }}-${{ hashFiles('**/test-requirements*.txt', '**/ci.yml', '**/ci-run.sh') }}

      - name: Run CI
        env: ${{ matrix.env }}
        run: bash ./Tools/ci-run.sh
